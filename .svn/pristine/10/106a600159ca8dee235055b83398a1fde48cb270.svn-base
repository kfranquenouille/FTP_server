package request;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Currency;

import server.FtpClient;
import exception.RequestException;

public class RequestLIST implements Request {

	/**
	 * Singleton 
	 */
	private RequestLIST(){}
	
	private static RequestLIST INSTANCE = new RequestLIST();
	
	/**
	 * 
	 * @return
	 */
	public static RequestLIST getInstance(){
		return INSTANCE;
	}

	@Override
	public void executeRequest(String[] requete, FtpClient ftp) throws RequestException {
		if (!requete[0].equals("LIST")){
			this.nextRequest(requete, ftp);
			return;
		}
		if (!ftp.getClient().isRead()){
			ftp.getWriter().println("425 Can't open data connection.");
			return;
		}
		
		/* On check depuis la racine */
		File rootDirectory = new File(ftp.getRoot());
		/* On liste tous les fichiers */
		File listFiles[] = rootDirectory.listFiles();
		String nameCurrentFile="";
		ftp.getWriter().println("150 Opening ASCII mode data connection for file list");
		ftp.getWriter().println("Listing the directory : "+ftp.getRoot());
		
		if (ftp.isPassive()){
			System.out.println("on veut le mode passif");
		} else {
			try {
				ftp.setDataSocket(new Socket(InetAddress.getByName(ftp.getAddress()), ftp.getPort()));
				
				ftp.setDataReader(new DataInputStream(ftp.getDataSocket().getInputStream()));
				ftp.setDataWriter(new DataOutputStream(ftp.getDataSocket().getOutputStream()));
				
				if (listFiles.length > 0){
					System.out.println("liste des fichiers");
					for (int i=0; i<listFiles.length; i++){
						if (listFiles[i].isFile()){
							nameCurrentFile=listFiles[i].getName();
						} else if (listFiles[i].isDirectory()){
							nameCurrentFile=listFiles[i].getName()+"/";
						}
						nameCurrentFile = ftp.getRoot()+nameCurrentFile+"\n";
						ftp.getDataWriter().writeBytes(nameCurrentFile);
						ftp.getDataWriter().flush();
					}
				}
				ftp.getDataSocket().close();
				ftp.getWriter().println("226 Transfer complete.");
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		
	}

	@Override
	public void nextRequest(String[] requete, FtpClient ftp) {
		try {
			RequestPORT.getInstance().executeRequest(requete, ftp);
		} catch (RequestException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//RequestPASS.getInstance().nextRequest(requete, ftp);
	}

}
